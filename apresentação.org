#+Title: Vôo de Pássaro: Functional Reactive Programming
#+Author: Thales Macedo Garitezi

#+Startup: showeverything

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.8.0
# ,##+REVEAL_ROOT: file:///home/thales/Downloads/reveal.js-3.8.0/
#+REVEAL_THEME: black
#+REVEAL_MIN_SCALE: 0.3
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_EXTRA_CSS: ./style.css
#+OPTIONS: toc:1

* O que é FRP?

/Um modelo para valores que dependem do tempo./

*** Criadores

Conal Elliott e Paul Hudak
/Functional Reactive Animation/, ICFP 97.

*** Características

- Denotativa :: elementos ➡ significado
- Contínua :: implementação
- Declarativa :: o quê vs. como (ou modelo vs. apresentação)
- Pura :: estado (tempo) explícito
- Componível ::

* Usos

- Música [fn:euterpea] (51:16).
- Interfaces gráficas [fn:reflex].
- Robôs [fn:hudak-arrow].
- Jogos [fn:eulerea] [fn:yampa-game].

[fn:euterpea] https://youtu.be/xtmo6Bmfahc?t=2994
[fn:eulerea] https://leanpub.com/gameinhaskell
[fn:yampa-game] https://linearity.itch.io/peoplemon
[fn:reflex] https://reflex-frp.org/
[fn:hudak-arrow] https://link.springer.com/chapter/10.1007/978-3-540-44833-4_6 e http://www.cs.yale.edu/homes/hudak/CS429F04/AFPLectureNotes.pdf

* Variações

** Motor das computações

- Push :: Movido por dados. Eventos percorrem o grafo e produzem um valor conforme ocorrem.
- Pull :: Movido por demanda. Um valor é demandado e o grafo é percorrido até as fontes para computá-lo.
- Push/Pull :: "O melhor dos dois mundos". Eventos internos construídos apenas quando resultado demandado. [fn:wiki-push-pull]

[fn:wiki-push-pull] https://en.wikipedia.org/wiki/Functional_reactive_programming#Implementation_issues, acessado em 12/09/2019.

** Dinamicidade do grafo

- /Classic FRP/
- /Higher-Order FRP/
- /Arrowized FRP/
- /Asynchronous data-flow/

* Elementos básicos

- Comportamentos
#+BEGIN_SRC haskell
-- | Comportamentos
Behavior a = Time -> a

-- | Eventos
Event a = [(Time, a)]
#+END_SRC

* Netwire

Ertugrul Söylemez (22/09/1985 - 12/05/2018) [fn:söylemez]

Último release: 25/03/2018

[fn:söylemez] https://byorgey.wordpress.com/2018/05/21/ertugrul-soylemez-1985-2018/

* Referências

- FRP segundo Conal Elliott :: https://stackoverflow.com/a/1030631/2708711
- Tese do Evan Czaplicki :: https://elm-lang.org/assets/papers/concurrent-frp.pdf
- Zoológico de bibliotecas FRP :: https://github.com/gelisam/frp-zoo

* Apêndice

** FRP vs. CSP

São duas abstrações para descrever sistemas dinâmicos / concorrência.

CSP é um formalismo para descrever sistemas concorrentes cujos
processos que o compõem interagem através de eventos de comunicação.[fn:roscoe]

Enquanto FRP descreve /comportamentos e eventos/ que dependem
diretamente do tempo e primitivas para combiná-los em novos
/comportamentos/, CSP descreve o /alfabeto/ que /processos/ podem usar
para comunicar-se entre si e com o ambiente.

[fn:roscoe] The theory and practice of concurrency. A. W. Roscoe, 1998.
